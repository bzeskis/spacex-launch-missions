{"version":3,"sources":["SpaceX_Logo_Black.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","upcomingMission","Date","className","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","loadingItem","launches","map","key","LAUNCH_QUERY","withRouter","props","parseInt","match","params","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4833c277.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceX_Logo_Black.dc45d3df.png\";","import React from 'react'\r\nimport Moment from 'react-moment'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction LaunchItem({ launch: {\r\n    flight_number,\r\n    mission_name,\r\n    launch_date_local,\r\n    launch_success } }) {\r\n\r\n    let upcomingMission = false;\r\n    if (new Date(launch_date_local) > new Date()) {\r\n        upcomingMission = true\r\n    }\r\n    return (\r\n        <div className=\"card card-body mb-3\">\r\n            <div className=\"row align-items-center\">\r\n                <div className=\"col-md-9 d-flex flex-column justify-content-end\">\r\n                    <h4 className=\"my-1\">\r\n                        <span className={upcomingMission ? '' : (launch_success ? ' text-success' : 'text-danger')}>\r\n                            {mission_name}\r\n                        </span>\r\n                    </h4>\r\n                    <p className=\"my-1\">\r\n                        <Moment format=\"YYYY-MM-DD HH:mm\">\r\n                            {launch_date_local}\r\n                        </Moment>\r\n                    </p>\r\n                    {upcomingMission ? 'Upcoming mission' : ''}\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-outline-secondary\">Launch Details</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LaunchItem\r\n","import React from 'react'\r\n\r\nfunction MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Failed\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-dark\" /> = Upcoming\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MissionKey\r\n","import React from 'react'\r\nimport { useQuery, gql } from '@apollo/client'\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`\r\n\r\nfunction Launches() {\r\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY)\r\n    if (error) return <p>Error</p>;\r\n    const loadingItem = <p>Loading missions...</p>\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"display-4 my-5 mx-auto w-75 text-center\">Launch Missions</h1>\r\n            <MissionKey />\r\n            {loading ? loadingItem :\r\n                data.launches.map(launch => (\r\n                    <LaunchItem key={launch.flight_number} launch={launch} />\r\n                ))}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Launches\r\n","import React from 'react'\r\nimport { gql, useQuery } from '@apollo/client'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport Moment from 'react-moment'\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n\tlaunch(flight_number: $flight_number) {\r\n        flight_number\r\n        mission_name\r\n        launch_year\r\n        launch_date_local\r\n        launch_success\r\n        rocket {\r\n            rocket_id\r\n            rocket_name\r\n            rocket_type\r\n        }\r\n\t    }\r\n    }\r\n\r\n`\r\n\r\nfunction Launch(props) {\r\n    let flight_number = parseInt(props.match.params.flight_number)\r\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, { variables: { flight_number } })\r\n\r\n    if (error) return <p>Error</p>\r\n    if (loading) return <p>Loading...</p>\r\n    const { mission_name, launch_year, launch_date_local, launch_success, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch\r\n\r\n    const missionSuccess = () => {\r\n        if (new Date(launch_date_local) > new Date()) {\r\n            return (\r\n                <li className=\"list-group-item\">\r\n                    Planned mission date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\r\n                </li>\r\n            )\r\n        } else {\r\n            return (\r\n                <li className=\"list-group-item\">Launch Successful:\r\n                    <span className={launch_success ? 'text-success' : 'text-danger'}>\r\n                        {launch_success ? 'Yes' : 'No'}\r\n                    </span>\r\n                </li>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <h1 className=\"display-4 my-3\">{mission_name}</h1>\r\n                <h4 className=\"mb-3\">Launch Details</h4>\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n                    <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n                    {missionSuccess()}\r\n                </ul>\r\n                <h4 className=\"my-3\">Rocket Details</h4>\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                </ul>\r\n                <hr />\r\n                <Link to=\"/\" className=\"btn btn-outline-secondary\">Back</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default withRouter(Launch)","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom'\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch'\n\nimport './App.css';\nimport logo from './SpaceX_Logo_Black.png'\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <Link to=\"/\">\n            <img src={logo} alt=\"spacex logo\" style={{\n              width: 300,\n              display: 'block',\n              margin: '1rem auto'\n            }} />\n          </Link>\n          <Switch>\n            <Route exact path=\"/\">\n              <Launches />\n            </Route>\n            <Route exact path=\"/launch/:flight_number\">\n              <Launch />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}